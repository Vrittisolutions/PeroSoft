package com.vritti.petrosoft;

import org.ksoap2.SoapEnvelope;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;
import org.ndeftools.Message;
import org.ndeftools.util.activity.NfcReaderActivity;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Typeface;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import com.squareup.picasso.Picasso;
import com.vritti.common.CommonUtilities;
import com.vritti.common.PetroSoftData;

import java.io.File;

public class SaleActivity extends NfcReaderActivity {
	private Context parent;
	private ProgressDialog progressDialog;
	private LinearLayout baseLayout;
	private ImageView ivlogo;
	Button btnSubmit;

	private String responseString;
	// private boolean nextScreen = false;
	private EditText rfidNumberEdittext;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_sales);

		baseLayout = (LinearLayout) findViewById(R.id.linear_sales_rootlayout);

		Typeface contentTypeface = Typeface.createFromAsset(getAssets(),
				"font/BOOKOS.TTF");
		CommonUtilities.setFont(parent, baseLayout, contentTypeface);
		initialize();

		//apply validation of RFID/QRCode
		//if QR code then open camera and detect QRCode
		//after detecing get number and set to it

		if(PetroSoftData.ScanMode_RFID_QRCODE.equalsIgnoreCase("RFID")){
			scanCard();
		}else if(PetroSoftData.ScanMode_RFID_QRCODE.equalsIgnoreCase("QR CODE")){
			//scan QR code method
			//txtscan.setText("Scan QR");
			rfidNumberEdittext.setText("Enter QR Code");
			scanQR();
		}

		btnSubmit.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				new GetCustDetails().execute();
			}
		});

	}

	private void initialize() {
		parent = SaleActivity.this;
		rfidNumberEdittext = (EditText) findViewById(R.id.edRFIDNo);
		ivlogo = (ImageView) findViewById(R.id.iconlogo);
		btnSubmit = (Button)findViewById(R.id.btnSubmit);

		PetroSoftData.cust_code = null;
		PetroSoftData.veh_no = null;
		PetroSoftData.rfid_card = null;
		PetroSoftData.name = null;
				PetroSoftData.item_desc = null;
				PetroSoftData.qty = null;
				PetroSoftData.vv = null;
				PetroSoftData.sodetailid = null;

		PetroSoftData.cust_balance = null;
		PetroSoftData.cred_lim = null;
		PetroSoftData.Reward_Points = null;
		if(PetroSoftData.imgPath!=null){
			Picasso.with(SaleActivity.this).load(PetroSoftData.imgPath)/*
					.placeholder(R.drawable.petro_soft_logo)
					.error(R.drawable.petro_soft_logo)*/
					.into(ivlogo);
		}
		else{
			ivlogo.setImageResource(R.drawable.petro_soft_logo);
		}
	}

	private void scanCard(){
		progressDialog = new ProgressDialog(parent);
		progressDialog.setMessage("Detecting...");
		progressDialog.setCancelable(true);
		progressDialog.show();
		progressDialog.setOnCancelListener(new OnCancelListener() {

			public void onCancel(DialogInterface dialog) {
				// TODO Auto-generated method stub
				finish();
			}
		});

		setDetecting(true);
	}

	class GetCustDetails extends AsyncTask<Void, Void, Void> {
		String exceptionString = "ok";
		String rfidstr;

		@Override
		protected Void doInBackground(Void... params) {

			try {

				// String fullURL = getResources().getString(R.string.url);
				String fullURL = PetroSoftData.URL;
				SoapObject request = new SoapObject(PetroSoftData.NAMESPACE,
						PetroSoftData.METHOD_GET_CUST_DETAILS);
				PropertyInfo propInfo = new PropertyInfo();
				propInfo.type = PropertyInfo.STRING_CLASS;
				// adding parameters
				request.addProperty("rfidstr",rfidstr);

				SoapSerializationEnvelope envelope = new SoapSerializationEnvelope(
						SoapEnvelope.VER11);
				envelope.dotNet = true;
				envelope.setOutputSoapObject(request);
				HttpTransportSE androidHttpTransport = new HttpTransportSE(
						fullURL);
				androidHttpTransport.call(PetroSoftData.NAMESPACE
						+ PetroSoftData.METHOD_GET_CUST_DETAILS, envelope);
				SoapObject response = (SoapObject) envelope.bodyIn;
				exceptionString = response.toString();
				SoapObject GetCustDetailsResponse = (SoapObject) response
						.getProperty(0);
				SoapObject GetCustDetailsResult = (SoapObject) GetCustDetailsResponse
						.getProperty(0);
				SoapObject Table = (SoapObject) GetCustDetailsResult
						.getProperty(0);

				PetroSoftData.cust_code = Table.getProperty("cust_code")
						.toString().trim();
				PetroSoftData.veh_no = Table.getProperty("veh_no").toString()
						.trim();
				PetroSoftData.rfid_card = Table.getProperty("rfid_card")
						.toString().trim();
				PetroSoftData.name = Table.getProperty("name").toString()
						.trim();
				PetroSoftData.item_desc = Table.getProperty("itemname").toString()
						.trim();
				PetroSoftData.qty = Table.getProperty("qty").toString()
						.trim();
				PetroSoftData.sodetailid = Table.getProperty("sodetailid").toString().trim();
				PetroSoftData.cust_balance = Table.getProperty("balance").toString().trim();
				PetroSoftData.cred_lim = Table.getProperty("credlim").toString().trim();
				PetroSoftData.Reward_Points = Table.getProperty("Bal_Point").toString().trim();
				PetroSoftData.vv = Table.getProperty("vv").toString().trim();

			} catch (Exception e) {
				exceptionString = "error";
				e.printStackTrace();
			}
			return null;
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
			rfidstr = rfidNumberEdittext.getText().toString();
			progressDialog = new ProgressDialog(parent);
			progressDialog.setMessage("Processing...");
			progressDialog.setCancelable(false);
			progressDialog.show();
		}

		@Override
		protected void onPostExecute(Void result) {
			progressDialog.dismiss();
			if (PetroSoftData.cust_code == null) {
                rfidNumberEdittext.setText("");
				Toast.makeText(parent, "Customer details not available..",
						Toast.LENGTH_LONG).show();
				PetroSoftData.cust_code = null;
				PetroSoftData.veh_no = null;
				PetroSoftData.rfid_card = null;
				PetroSoftData.name = null;
				PetroSoftData.item_desc = null;
				PetroSoftData.qty = null;
				PetroSoftData.vv = null;
				PetroSoftData.sodetailid = null;
				PetroSoftData.cust_balance = null;
				PetroSoftData.cred_lim = null;
				PetroSoftData.Reward_Points = null;

				finish();
			} else {
				startActivity(new Intent(parent, BillDetails.class));
				finish();
			}
		}
	}

	@Override
	protected void readNdefUID(String UID) {
		((EditText) findViewById(R.id.edRFIDNo)).setText(UID);
		progressDialog.dismiss();
		if ((UID != null)) {
			if(!UID.trim().equalsIgnoreCase(""))
				new GetCustDetails().execute();
		}
		
	}

	@Override
	protected void readNdefMessage(Message message) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void readEmptyNdefMessage() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void readNonNdefMessage() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onNfcStateEnabled() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onNfcStateDisabled() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onNfcStateChange(boolean enabled) {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onNfcFeatureNotFound() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void onTagLost() {
		// TODO Auto-generated method stub
	}

	//on ActivityResult method
	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		if (requestCode == 0) {
			if (resultCode == RESULT_OK) {
				//get the extras that are returned from the intent
				String contents = intent.getStringExtra("SCAN_RESULT");
				String format = intent.getStringExtra("SCAN_RESULT_FORMAT");

				Toast toast;
				if(contents.equalsIgnoreCase(" ") || contents.equalsIgnoreCase(null)){

				//	toast = Toast.makeText(this, "Content:" + contents + " Format:" + format, Toast.LENGTH_SHORT);
				}
				else {
					rfidNumberEdittext.setText(contents.trim());

				//	toast =  Toast.makeText(this, "Content:" + contents + " Format:" + format, Toast.LENGTH_SHORT);
				}
				//toast.show();
			}
		}
	}

	//product qr code mode
	public void scanQR() {
		try {
			//start the scanning activity from the com.google.zxing.client.android.SCAN intent
			Intent intent = new Intent(PetroSoftData.ACTION_SCAN);
			intent.putExtra("SCAN_MODE", "QR_CODE_MODE");
			startActivityForResult(intent, 0);
		} catch (ActivityNotFoundException anfe) {
			//on catch, show the download dialog
			showDialog(SaleActivity.this, "No Scanner Found",
					"Download a scanner code activity?", "Yes", "No").show();
		}
	}

	//alert dialog for downloadDialog
	private static AlertDialog showDialog(final Activity act, CharSequence title, CharSequence message, CharSequence buttonYes, CharSequence buttonNo) {
		AlertDialog.Builder downloadDialog = new AlertDialog.Builder(act);
		downloadDialog.setTitle(title);
		downloadDialog.setMessage(message);
		downloadDialog.setPositiveButton(buttonYes, new DialogInterface.OnClickListener() {

			public void onClick(DialogInterface dialogInterface, int i) {
				Uri uri = Uri.parse("market://search?q=pname:" + "com.google.zxing.client.android");
				Intent intent = new Intent(Intent.ACTION_VIEW, uri);
				try {
					act.startActivity(intent);
				} catch (ActivityNotFoundException anfe) {
				}
			}
		});
		downloadDialog.setNegativeButton(buttonNo, new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialogInterface, int i) {
			}

		});
		return downloadDialog.show();
	}

}